diff --git a/lib/codegen/template/context.js b/lib/codegen/template/context.js
index bdae8e6bdd6853fb0cce9ad0f417fb01313a1dd1..9b04318e1cf290aa59783cdc53220433b7658aaf 100644
--- a/lib/codegen/template/context.js
+++ b/lib/codegen/template/context.js
@@ -184,7 +184,10 @@ function createTemplateCodegenContext(scriptSetupBindingNames) {
                             varName,
                             'template',
                             offset,
-                            codeFeatures.additionalCompletion,
+                            {
+                              ...codeFeatures.navigation,
+                              semantic: false,
+                            },
                         ];
                     }
                     yield `,`;
diff --git a/lib/codegen/template/element.js b/lib/codegen/template/element.js
index b208961a53e8118c8ad77b69e4fe8d461511ad0e..25aa701e7843293334cc3c706da0dca920830582 100644
--- a/lib/codegen/template/element.js
+++ b/lib/codegen/template/element.js
@@ -124,12 +124,16 @@ function* generateComponent(options, ctx, node, currentComponent, componentCtxVa
             // auto import support
             yield `// @ts-ignore${common_1.newLine}`; // #2304
             yield `[`;
+            let isFirstProvideCompletion = false;
             for (const tagOffset of tagOffsets) {
+                let completion = false;
+                if (!isFirstProvideCompletion) {
+                    isFirstProvideCompletion = true;
+                    completion = true;
+                }
                 yield* (0, camelized_1.generateCamelized)((0, shared_1.capitalize)(node.tag), tagOffset, {
-                    completion: {
-                        isAdditional: true,
-                        onlyImport: true,
-                    },
+                    navigation: true,
+                    completion,
                 });
                 yield `,`;
             }
diff --git a/lib/codegen/template/elementProps.js b/lib/codegen/template/elementProps.js
index bedc7f6692cdf6052947fbe4f2761f2aa2481689..ea42ec957d6a260106d3b6d7e5c5b3a84cda7723 100644
--- a/lib/codegen/template/elementProps.js
+++ b/lib/codegen/template/elementProps.js
@@ -78,7 +78,7 @@ function* generateElementProps(options, ctx, node, props, enableCodeFeatures, pr
             }
             const codes = (0, common_1.wrapWith)(prop.loc.start.offset, prop.loc.end.offset, ctx.codeFeatures.verification, ...(prop.arg
                 ? (0, objectProperty_1.generateObjectProperty)(options, ctx, propName, prop.arg.loc.start.offset, {
-                    ...ctx.codeFeatures.withoutHighlightAndCompletion,
+                    ...ctx.codeFeatures.withoutHighlight,
                     navigation: ctx.codeFeatures.withoutHighlightAndCompletion.navigation
                         ? {
                             resolveRenameNewName: shared_1.camelize,
@@ -86,7 +86,7 @@ function* generateElementProps(options, ctx, node, props, enableCodeFeatures, pr
                         }
                         : false,
                 }, prop.loc.name_2 ?? (prop.loc.name_2 = {}), shouldCamelize)
-                : [propName]), `: (`, ...genereatePropExp(options, ctx, prop.exp, ctx.codeFeatures.all, prop.arg?.loc.start.offset === prop.exp?.loc.start.offset, enableCodeFeatures), `)`);
+                : [propName]), `: (`, ...genereatePropExp(options, ctx, prop.exp, { ...ctx.codeFeatures.all, navigation: false }, prop.arg?.loc.start.offset === prop.exp?.loc.start.offset, enableCodeFeatures), `)`);
             if (!enableCodeFeatures) {
                 yield (0, muggle_string_1.toString)([...codes]);
             }
@@ -141,7 +141,7 @@ function* generateElementProps(options, ctx, node, props, enableCodeFeatures, pr
             && prop.name === 'bind'
             && !prop.arg
             && prop.exp?.type === CompilerDOM.NodeTypes.SIMPLE_EXPRESSION) {
-            const codes = (0, common_1.conditionWrapWith)(enableCodeFeatures, prop.exp.loc.start.offset, prop.exp.loc.end.offset, ctx.codeFeatures.verification, `...`, ...(0, interpolation_1.generateInterpolation)(options, ctx, prop.exp.content, prop.exp.loc, prop.exp.loc.start.offset, ctx.codeFeatures.all, '(', ')'));
+            const codes = (0, common_1.conditionWrapWith)(enableCodeFeatures, prop.exp.loc.start.offset, prop.exp.loc.end.offset, ctx.codeFeatures.verification, `...`, ...(0, interpolation_1.generateInterpolation)(options, ctx, prop.exp.content, prop.exp.loc, prop.exp.loc.start.offset, { ...ctx.codeFeatures.all, navigation: false }, '(', ')'));
             if (!enableCodeFeatures) {
                 yield (0, muggle_string_1.toString)([...codes]);
             }
